#!/bin/bash
#
#
#         .__                   __
#    _____|  |__   ____   ____ |  | __ ___________
#   /  ___/  |  \ /  _ \_/ ___\|  |/ // __ \_  __ \
#   \___ \|   Y  (  <_> )  \___|    <\  ___/|  | \/
#  /____  >___|  /\____/ \___  >__|_ \\___  >__|
#       \/     \/            \/     \/    \/
#                         --- version 0.6d ---
#
#




    #
    #   command(s)
    #
    basename='basename'
    cd='cd'
    cp='cp'
    chmod='chmod'
    dirname='dirname'
    docker='docker'
    echo='echo'
    exit='exit'
    find='find'
    mkdir='mkdir'
    mktemp='mktemp'
    pwd='pwd'
    realpath='realpath'
    rm='rm'
    tail='tail'
    tar='tar'
    tree='tree'


    #
    #   default(s)
    #
    script=$0
    script_config="$HOME/.config/shocker"
    script_config_run="$script_config/run"
    script_config_app="$script_config/app"
    script_name='shocker'
    script_path=$( dirname $script )
    script_repo=$( $cd "$script_path/.." && $pwd -P )


    #
    #   global(s)
    #
    application=''
    archive=''
    archive_export=''
    task=''


    #
    #   function(s)
    #
    #

        #
        #   cmd_docker - docker $@
        #
        function cmd_docker() {

            # arg(s)
            case "$#" in
                0)  $docker ps
                    display_msg ''
                    $docker images
                    ;;
                *)  $docker $@
                    ;;
            esac

            # return
            return 0

        }

        #
        #   cmd_export - export app (.tar.gz)
        #
        function cmd_export() {

            # ? application
            [ -z "$application" ]                           && \
                display_error "Application not specified"   && \
                $exit 2

            # var
            name=$( $basename $application )
            app="$application"
            run="$script_config_run/$name"
            working=$( $mktemp -d )
            archive=$( $realpath $archive_export )

            # | prepare

                # working
                cd "$working"

                # copy - app
                $cp -r "$app"/* .

                # remove - skel
                test -d "skel" && $rm -r "skel"

                # copy - run => skel
                $cp -r "$run" "skel"

                # archive
                $tar -zcvf "$archive" *

                # cleanup
                $rm -r "$working"

            # prepare |

            # return
            return 0

        }

        #
        #   cmd_import - import app (.tar.gz)
        #
        function cmd_import() {

            # ? archive
            [ -z "$archive" ]                               && \
                display_error "Archive not specified"       && \
                $exit 2

            # ? archive mime
            if ! file --mime-type "$archive" | grep -q 'application/gzip'; then
               display_error "Archive is a not a valid 'gzip'"
               exit 2
            fi

            # variable(s)
            src="$archive"                                      # source
            dst="$script_config_app/`$basename $archive`"       # destination
            cnf="$script_config_run/`$basename $archive`"       # config

            # ? exists
            [ -e "$dst" ]                                   && \
                display_error "Application already exists"  && \
                $exit 2

            # folder
            $mkdir "$dst"
            [ ! -e "$dst" ]                                         && \
                display_error "Unable to write application folder"  && \
                $exit 2

            # extract
            $tar -xvzf "$src" -C "$dst"
            display_msg ''

            # permission(s)
            [ -d "$dst/bin" ]               && \
                $chmod +x "$dst/bin/"*

            # config
            if [ ! -d "$cnf" ]; then

                # create
                mkdir "$cnf"

                # skeleton
                [ -d "$dst/skel" ]                      && \
                    $cp -r "$dst/skel/"* "$cnf"

            fi

            # return
            return 0

        }

        #
        #   cmd_list - tree app folder
        #
        function cmd_list() {

            # display
            display_msg '|'
            $echo "| $script_name"

            # file count
            file_count=$(ls "$script_config_app" | wc -l)

            # ? display
            if [ "$file_count" -gt 0 ]; then
                $tree --dirsfirst -C -l -L 4 --noreport "$script_config_app"    | \
                    $tail -n +2
                display_msg ''
            else
                display_msg '|'
            fi

            # return
            return 0

        }
        # reference: /usr/bin/pass, aka 'password-store'

        #
        #   cmd_remove - remove application
        #
        function cmd_remove() {

            # ? application
            [ -z "$application" ]                           && \
                display_error "Application not specified"   && \
                $exit 2

            # remove
            $rm -r --verbose "$application"
            display_msg ''

            # return
            return 0

        }

        #
        #   cmd_reset - reset application runtime resources
        #
        function cmd_reset() {

            # ? application
            [ -z "$application" ]                           && \
                display_error "Application not specified"   && \
                $exit 2

            # reset
            $cp -r --verbose -i "$application/skel/"* "$run";

            # return
            return 0

        }

        #
        #   cmd_shock - shock application task
        #
        function cmd_shock() {

            # ? task
            [ -z "$task" ]                          && \
                display_error "Task not specified"  && \
                $exit 2

            # shock
            $task

            # return
            return 0

        }

        #
        #   display - display set variable(s)
        #
        function display() {

                                                # display
                                                display_msg ''
            test ! -z "$1"              &&      display_msg "Command:               $1"                         \
                                        &&      display_msg ''
            test ! -z "$application"    &&      display_msg "Application:           `$basename $application`"
            test ! -z "$application"    &&      display_msg "Application path:      $application"               \
                                        &&      display_msg ''
            test ! -z "$task"           &&      display_msg "Task:                  `$basename $task` "
            test ! -z "$task"           &&      display_msg "Task path:             $task"                      \
                                        &&      display_msg ''
            test ! -z "$archive"        &&      display_msg "Archive:               `$basename $archive` "
            test ! -z "$archive"        &&      display_msg "Archive path:          $archive"                   \
                                        &&      display_msg ''
            test ! -z "$archive_export" &&      display_msg "Archive export:        `$basename $archive_export` "
            test ! -z "$archive_export" &&      display_msg "Archive export path:   $archive_export"            \
                                        &&      display_msg ''

            # return
            return 0

        }

        #
        #   display_msg - display a message
        #
        function display_msg() {
            $echo "$1"
            return 0
        }

        #
        #   display_error - display a error message
        #
        function display_error() {
            $echo "Error: $1"
            return 0
        }

        #
        #   display_help - display a help message
        #
        function display_help() {
            $echo   ""
            $echo   "   GitHub: https://github.com/local-user/shocker"
            $echo   ""
            return 0
        }

        #
        #   display_usage - display usage
        #
        function display_usage() {
            $echo "$script_name: $script_name [docker|export|import|list|remove|reset|shock] option"
            return 0
        }

        #
        #   set_application - set application
        #
        function set_application () {

                     # find & set
                     result_count=$( $find "$script_config_app" -maxdepth 1 -name *"$1"* -type d | wc -l )
            if   [ "$result_count" -eq 1 ]; then
                application=$( $find "$script_config_app" -maxdepth 1 -name *"$1"* -type d )
            elif [ "$result_count" -gt 1 ]; then
                display_error "Multiple applications found matching '$1'"
                $exit 2
            else
                display_error "No applications found matching '$1'"
                $exit 2
            fi

            # return
            return 0

        }

        #
        #   set_archive - set archive
        #
        function set_archive() {

            # ? exists
            [ ! -e "$1" ]                               && \
                display_error "Archive '$1' not found"  && \
                $exit 2

            # set
            archive="$1"

            # return
            return 0

        }

        #
        #   set_archive - set archive export
        #
        function set_archive_export() {

            # ? writeable
            touch "$1"
            [ ! -w "$1" ]                                               && \
                display_error "Export archive '$1' is not writeable"    && \
                $exit 2
            rm "$1"

            # set
            archive_export="$1"

            # return
            return 0

        }

        #
        #   set_run - set run
        #
        function set_run () {

                     # find & set
                     result_count=$( $find "$script_config_run" -maxdepth 1 -name *"$1"* -type d | wc -l )
            if   [ "$result_count" -eq 1 ]; then
                run=$( $find "$script_config_run" -maxdepth 1 -name *"$1"* -type d )
            elif [ "$result_count" -gt 1 ]; then
                display_error "Multiple applications found matching '$1'"
                $exit 2
            fi

            # default
            if [ ! -z "$application" ]; then
                run="$script_config_run/`$basename $application`"
            else
                display_error "No applications found matching '$1'"
                $exit 2
            fi

            # return
            return 0

        }

        #
        #   set_task - set task
        #
        function set_task () {

            # ? application
            [ -z "$application" ]                           && \
                display_error "Application not specified"   && \
                $exit 2

            # ? task
            [ ! -f "$application/bin/$1" ]                              && \
                display_error "Task '$application/bin/$1' not found"    && \
                $exit 2

            # set
            task="$application/bin/$1"

            # return
            return 0

        }

    #   function(s)
    #   -- end
    #


    #
    #   logic
    #

        # create -- config -- app
        if [ ! -d "$script_config_app" ]; then
            $mkdir -p "$script_config_app"
            if [ $? -ne 0 ]; then
                display_error "Unable to create '$script_config_app'"
                $exit 2
            fi
        fi

        # create -- config -- run
        if [ ! -d "$script_config_run" ]; then
            $mkdir -p "$script_config_run"
            if [ $? -ne 0 ]; then
                display_error "Unable to create '$script_config_run'"
                $exit 2
            fi
        fi

        # check -- no arg(s)
        if [ $# -eq 0 ]; then
            display_usage
            $exit 2
        fi

        # function
        case "$1" in
            docker|-d)
                shift
                display "docker"
                cmd_docker $@
                ;;
            export|-e)
                shift
                set_application "$1"
                shift
                set_archive_export "$1"
                shift
                display "export"
                cmd_export
                ;;
            help|-h)
                shift
                display_help
                ;;
            import|-i)
                shift
                set_archive "$1"
                shift
                display "import"
                cmd_import
                ;;
            list|-l)
                shift
                cmd_list
                ;;
            remove|-r)
                shift
                set_application "$1"
                shift
                display "remove"
                cmd_remove
                ;;
            reset)
                shift
                set_application "$1"
                set_run "$1"
                shift
                display "reset"
                cmd_reset
                ;;
            shock)
                shift
                set_application "$1"
                shift
                set_task "$1"
                shift
                display "shock"
                cmd_shock
                ;;
            *)
                display_usage
                ;;
        esac

    #
    #   logic
    #   --end
    #




#
# -- <(o_^)< -- pew pew
#
